<project default="build" basedir=".">

    <!-- Source, JUnit test code and jar library locations. -->
    <property name="src" location="src"/>
    <property name="test" location="test"/>
    <property name="lib" location="lib"/>

    <!-- Location to check for local copy of beast2 repository -->
    <property name="beastDir" location="../beast2"/>
    <property name="BeastFXDir" location="../BeastFX"/>

    <!-- Location to check for local copy of BEASTLabs repository -->
    <property name="beastLabsDir" location="../BEASTLabs"/>
    <!-- Location to check for local copy of BEASTLabs repository -->
    <property name="saDir" location="../sampled-ancestors"/>

    <!-- BEAST 2 currently uses Java 17 -->
    <property name="sourceVersion" value="17"/>
    <property name="targetVersion" value="17"/>

    <!-- Directories necessary for all BEAST 2 packages -->
    <property name="doc" location="doc"/>
    <property name="examples" location="examples"/>
    <property name="fxtemplates" location="fxtemplates"/>

    <!-- BEAST branch and version to build against
         (only different for version tags because of
         a Github peculiarity) -->
    <property name="beast-branch" value="master"/>
    <property name="beast-version" value="master"/>

    <!-- Names of temporary build/test directories -->
    <property name="build" location="build"/>
    <property name="build-lib" location="build-lib"/>
    <property name="build-test" location="build-test"/>
    <property name="test-reports" location="test-reports"/>
    <property name="dist" location="dist"/>
    <property name="pack" location="${dist}/package"/>

    <!-- Prepare for compilation -->
    <target name="init">

        <available file="version.xml" property="versionAvailable"/>
        <fail unless="versionAvailable">
            ** Required file version.xml does not exist. **
            If this is a new project, run "ant skeleton" from
            the command line to create the files required for
            your BEAST 2 package.
        </fail>

        <!-- Read package name and version from xml file -->
        <xmlproperty file="version.xml" prefix="fromVersionFile" />
        <property name="projName" value="${fromVersionFile.package(name)}" />
        <property name="projVersion" value="${fromVersionFile.package(version)}" />

        <mkdir dir="${build}"/>
        <mkdir dir="${build-lib}"/>
        <mkdir dir="${dist}"/>

        <copy todir="${build-lib}" failonerror="false">
            <fileset dir="${lib}" includes="*.jar"/>
        </copy>
    </target>

    <!-- Get beast -->

    <target name="find-beast" depends="init">
        <available file="${beastDir}" property="localBeastAvailable"/>
    </target>

    <target name="build-remote-beast" depends="find-beast" unless="localBeastAvailable">
        <echo>No local copy of the beast2 source found at ${beastDir}.</echo>
        <echo>Compiling against version ${beast-version} from GitHub.</echo>

        <property name="build-beast" location="build-beast"/>
        <mkdir dir="${build-beast}"/>

        <get src="https://github.com/CompEvol/beast2/archive/${beast-branch}.zip" dest="${build-beast}/beast.zip"/>
        <unzip src="${build-beast}/beast.zip" dest="${build-beast}"/>
        <mkdir dir="${build-beast}/beast2-${beast-version}/build"/>
        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${build-beast}/beast2-${beast-version}/src"
               destdir="${build-beast}/beast2-${beast-version}/build" includeantruntime="false">
            <classpath>
                <fileset dir="${build-beast}/beast2-${beast-version}/lib" includes="*.jar"/>
            </classpath>
        </javac>
        <jar jarfile="${build-lib}/beast2.jar" basedir="${build-beast}/beast2-${beast-version}/build" />
        <copy todir="${build-lib}">
            <fileset dir="${build-beast}/beast2-${beast-version}/lib" includes="*.jar"/>
        </copy>

        <delete dir="${build-beast}" />

    </target>

    <target name="build-local-beast" depends="find-beast" if="localBeastAvailable">
        <echo>Compiling against beast2 source found at ${beastDir}.</echo>

        <property name="build-beast" location="build-beast"/>
        <mkdir dir="${build-beast}"/>

        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${beastDir}/src"
               destdir="${build-beast}" includeantruntime="false">
            <classpath>
                <fileset dir="${beastDir}/lib" includes="*.jar"/>
            </classpath>
        </javac>
        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${beastDir}/test"
               destdir="${build-beast}" includeantruntime="false">
            <classpath>
                <fileset dir="${beastDir}/lib" includes="*.jar"/>
                <fileset dir="${beastDir}/lib/junit" includes="*.jar"/>
            </classpath>
        </javac>
        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${BeastFXDir}/src"
               destdir="${build-beast}" includeantruntime="false">
            <classpath>
                <fileset dir="${beastDir}/lib" includes="*.jar"/>
                <fileset dir="${beastDir}/lib/junit" includes="*.jar"/>
                <fileset dir="${BeastFXDir}/locallib" includes="*.jar"/>
            </classpath>
        </javac>
        <jar jarfile="${build-lib}/beast2.jar" basedir="${build-beast}" />
        <copy todir="${build-lib}">
            <fileset dir="${beastDir}/lib" includes="*.jar"/>
        </copy>

        <delete dir="${build-beast}" />
    </target>

    <target name="build-beast" depends="build-local-beast,build-remote-beast"/>

    <!-- Get BEASTLabs -->

    <target name="find-beastlabs" depends="init">
        <available file="${beastLabsDir}" property="localBeastLabsAvailable"/>
    </target>

    <target name="build-remote-beastlabs" depends="find-beastlabs" unless="localBeastLabsAvailable">
        <echo>No local copy of the BEASTLabs source found at ${beastLabsDir}.</echo>
        <echo>Compiling against version ${beast-version} from GitHub.</echo>

        <property name="build-beastlabs" location="build-beastlabs"/>
        <mkdir dir="${build-beastlabs}"/>

        <get src="https://github.com/beast2-dev/BEASTLabs/archive/master.zip" dest="${build-beastlabs}/beastlabs.zip"/>
        <unzip src="${build-beastlabs}/beastlabs.zip" dest="${build-beastlabs}"/>
        <mkdir dir="${build-beastlabs}/BEASTLabs-master/build"/>
        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${build-beastlabs}/BEASTLabs-master/src"
               destdir="${build-beastlabs}/BEASTLabs-master/build" includeantruntime="false">
            <classpath>
                <fileset dir="${build-beastlabs}/BEASTLabs-master/lib" includes="*.jar"/>
                <fileset dir="${build-lib}" includes="*.jar"/>
            </classpath>
        </javac>
        <jar jarfile="${build-lib}/beastlabs.jar" basedir="${build-beastlabs}/BEASTLabs-master/build" />
        <copy todir="${build-lib}">
            <fileset dir="${build-beastlabs}/BEASTLabs-master/lib" includes="*.jar"/>
        </copy>

        <delete dir="${build-beastlabs}" />
    </target>

    <target name="build-local-beastlabs" depends="find-beastlabs" if="localBeastLabsAvailable">
        <echo>Compiling against local BEASTLabs source found at ${beastLabsDir}.</echo>

        <property name="build-beastlabs" location="build-beastlabs"/>
        <mkdir dir="${build-beastlabs}"/>

        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${beastLabsDir}/src"
               destdir="${build-beastlabs}" includeantruntime="false">
            <include name="beastlabs/**/**" />
            <classpath>
                <fileset dir="${beastLabsDir}/lib" includes="*.jar"/>
                <fileset dir="${build-lib}" includes="*.jar"/>
            </classpath>
        </javac>
        <jar jarfile="${build-lib}/beastlabs.jar" basedir="${build-beastlabs}" />
        <copy todir="${build-lib}">
            <fileset dir="${beastLabsDir}/lib" includes="*.jar"/>
        </copy>

        <delete dir="${build-beastlabs}" />
    </target>

    <target name="build-beastlabs" depends="build-local-beastlabs,build-remote-beastlabs"/>

    <target name="find-sa" depends="init">
        <available file="${saDir}" property="localSaAvailable"/>
    </target>

    <target name="build-remote-sa" depends="find-sa" unless="localSaAvailable">
        <echo>No local copy of the sampled ancestors source found at ${saDir}.</echo>
        <echo>Compiling against version ${beast-version} from GitHub.</echo>

        <property name="build-sa" location="build-sa"/>
        <mkdir dir="${build-sa}"/>

        <get src="https://github.com/CompEvol/sampled-ancestors/releases/download/v2.1.0/SA.v2.1.0.zip" dest="${build-sa}/sa.zip"/>
        <unzip src="${build-sa}/sa.zip" dest="${build-sa}"/>
        <mkdir dir="${build-sa}/sa/build"/>
        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${build-sa}/sa/src"
               destdir="${build-sa}/sa/build" includeantruntime="false">
            <classpath>
                <fileset dir="${build-sa}/sa/lib" includes="*.jar"/>
                <fileset dir="${build-lib}" includes="*.jar"/>
            </classpath>
        </javac>
        <jar jarfile="${build-lib}/sa.jar" basedir="${build-sa}/sa/build" />
        <copy todir="${build-lib}">
            <fileset dir="${build-sa}/sa/lib" includes="*.jar"/>
        </copy>

        <delete dir="${build-sa}" />
    </target>

    <target name="build-local-sa" depends="find-sa" if="localSaAvailable">
        <echo>Compiling against local SA source found at ${saDir}.</echo>

        <property name="build-sa" location="build-sa"/>
        <mkdir dir="${build-sa}"/>

        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${saDir}/src"
               destdir="${build-sa}" includeantruntime="false">
            <include name="sa/**/**" />
            <classpath>
                <fileset dir="${build-lib}" includes="*.jar"/>
            </classpath>
        </javac>
        <jar jarfile="${build-lib}/sa.jar" basedir="${build-sa}" />

        <delete dir="${build-sa}" />
    </target>

    <target name="build-sa" depends="build-local-sa,build-remote-sa"/>

    <!-- Compile -->
    <target name="compile" depends="build-beast,build-beastlabs,build-sa">
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${src}" destdir="${build}" includeantruntime="false">
            <classpath>
                <pathelement path=""/>
                <fileset dir="${build-lib}" includes="*.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="copy-resources" depends="compile">
        <copy todir="${build}">
            <fileset dir="${src}"
                     includes="**/*.png" />
        </copy>
    </target>

    <!-- Prepare for unit test compilation -->
    <target name="init-test" depends="init">
        <mkdir dir="${build-test}"/>
        <mkdir dir="${test-reports}"/>
    </target>


    <!-- Compile unit tests -->
    <target name="compile-test" depends="init-test,compile,copy-resources">
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${test}" destdir="${build-test}" includeantruntime="false">
            <classpath>
                <pathelement path="${build}" />
                <fileset dir="${build-lib}" includes="*.jar"/>
            </classpath>
        </javac>
    </target>


    <!-- Run unit tests -->
    <target name="test" depends="compile-test">
        <junit printsummary="yes" failureproperty="testFailed" showoutput="true">
            <classpath>
                <pathelement path="${build}" />
                <pathelement path="${build-test}" />
                <fileset dir="${build-lib}" includes="*.jar"/>
            </classpath>
            <batchtest fork="yes" todir="${test-reports}">
                <fileset dir="${test}">
                    <include name="**/*Test.java"/>
                </fileset>
                <formatter type="plain"/>
                <!--formatter type="plain" usefile="false"/--> <!-- to screen -->
            </batchtest>
        </junit>

        <fail if="testFailed" status="1" message="Unit test failed."/>
    </target>


    <!-- Create BEAST 2 package -->
    <target name="build" depends="compile,copy-resources">
        <property name="fullName" value="${projName}.v${projVersion}"/>

        <mkdir dir="${pack}"/>
        <mkdir dir="${pack}/examples"/>
        <mkdir dir="${pack}/fxtemplates"/>
        <mkdir dir="${pack}/lib"/>
        <mkdir dir="${pack}/doc"/>

        <jar jarfile="${pack}/${fullName}.src.jar" basedir="${src}" />

        <mkdir dir="${lib}" />
        <copy todir="${pack}/lib">
            <fileset dir="${lib}" includes="*.jar" />
        </copy>
        <jar jarfile="${pack}/lib/${fullName}.jar" basedir="${build}" />

        <copy file="README.md" tofile="${pack}/README" />
        <copy todir="${pack}">
            <fileset dir="${lib}" includes="LICENSE*" />
        </copy>

        <mkdir dir="${examples}" />
        <copy todir="${pack}/examples">
            <fileset dir="${examples}" includes="**/*" />
        </copy>

        <mkdir dir="${fxtemplates}" />
        <copy todir="${pack}/fxtemplates">
            <fileset dir="${fxtemplates}" includes="*.xml" />
        </copy>

        <mkdir dir="${doc}" />
        <copy todir="${pack}/doc">
            <fileset dir="${doc}" includes="*.tex,*.doc,*.lyx,*.txt"/>
        </copy>

        <copy file="version.xml" todir="${pack}" />

        <zip destfile="${dist}/${fullName}.zip" basedir="${pack}" />

        <delete dir="${pack}"/>

        <echo/>
        <echo/>
        <echo>** Package ${dist}/${fullName}.zip created successfuly! **</echo>
    </target>


    <!-- Revert to pristine state. -->
    <target name="clean">
        <delete dir="${build}" />
        <delete dir="${build-lib}" />
        <delete dir="${dist}" />
        <delete dir="${build-test}" />
        <delete dir="${test-reports}" />
    </target>

</project>
